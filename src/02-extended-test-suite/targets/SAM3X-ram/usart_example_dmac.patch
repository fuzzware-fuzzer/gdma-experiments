84,85d83
< 
< 
88d85
< #include "pw_check.h"
91c88
< #define BUFFER_SIZE               8
---
> #define BUFFER_SIZE               32
110,117d106
< // the scatter gather buffers
< static uint8_t buffer1[4];
< // 8 byte padding to have a separation between buffers
< volatile uint8_t pad[8] = {0};
< static uint8_t buffer2[4];
< 
< EXPORT_DMA_BUFFER_ALIAS_NUM(buffer1, 1)
< EXPORT_DMA_BUFFER_ALIAS_NUM(buffer2, 2)
124c113
< 	dma_transfer_descriptor_t dmac_trans[2];
---
> 	dma_transfer_descriptor_t dmac_trans;
127,130d115
< 	// source peripheral is the same
< 	// hardware handshake is the same
< 	// stop on done the same
< 	// fifo cfg is also the same
137,148c122,125
< 	
< 	// here it gets interesting
< 	
< 	// setup the first transfer config
< 	// source addr is uart register
< 	dmac_trans[0].ul_source_addr = (uint32_t) & BOARD_USART->US_RHR;
< 	// destination our buffer1
< 	dmac_trans[0].ul_destination_addr = (uint32_t) buffer1;
< 	// buffer size is 4 bytes
< 	// data width stays the same
< 	dmac_trans[0].ul_ctrlA =
< 			DMAC_CTRLA_BTSIZE(4) |
---
> 	dmac_trans.ul_source_addr = (uint32_t) & BOARD_USART->US_RHR;
> 	dmac_trans.ul_destination_addr = (uint32_t) gs_puc_buffer;
> 	dmac_trans.ul_ctrlA =
> 			DMAC_CTRLA_BTSIZE(BUFFER_SIZE) |
150,156c127,128
< 	// fetch descriptor from memory and update source and destination
< 	// per2mem is still correct
< 	// src addr is still fixed (I think?)
< 	// dst was incrementing before, not 100% if this is correct here
< 	
< 	dmac_trans[0].ul_ctrlB =
< 			DMAC_CTRLB_SRC_DSCR_FETCH_FROM_MEM | DMAC_CTRLB_DST_DSCR_FETCH_FROM_MEM |
---
> 	dmac_trans.ul_ctrlB =
> 			DMAC_CTRLB_SRC_DSCR | DMAC_CTRLB_DST_DSCR |
159,181c131,133
< 	// pointer to next descriptor
< 	dmac_trans[0].ul_descriptor_addr = (uint32_t) &dmac_trans[1];
< 	
< 	
< 	// setup the second transfer config
< 	// it is the same, except for a few details
< 	// only differences are commented
< 	dmac_trans[1].ul_source_addr = (uint32_t) & BOARD_USART->US_RHR;
< 	// destination our buffer2
< 	dmac_trans[1].ul_destination_addr = (uint32_t) buffer2;
< 	dmac_trans[1].ul_ctrlA =
< 	DMAC_CTRLA_BTSIZE(4) |
< 	DMAC_CTRLA_SRC_WIDTH_BYTE | DMAC_CTRLA_DST_WIDTH_BYTE;	
< 	dmac_trans[1].ul_ctrlB =
< 	DMAC_CTRLB_SRC_DSCR_FETCH_FROM_MEM | DMAC_CTRLB_DST_DSCR_FETCH_FROM_MEM |
< 	DMAC_CTRLB_FC_PER2MEM_DMA_FC | DMAC_CTRLB_SRC_INCR_FIXED
< 	| DMAC_CTRLB_DST_INCR_INCREMENTING;
< 	// no more next descriptor, so 0 here
< 	dmac_trans[1].ul_descriptor_addr = 0;
< 	
< 	// setup the channel with the first descriptor
< 	dmac_channel_multi_buf_transfer_init(DMAC, BOARD_USART_DMAC_RX_CH,
< 			&dmac_trans[0]);
---
> 	dmac_trans.ul_descriptor_addr = 0;
> 	dmac_channel_single_buf_transfer_init(DMAC, BOARD_USART_DMAC_RX_CH,
> 			&dmac_trans);
190d141
< 	// we can leave this without scatter gather
222,240d172
< 	// how should the password be split?
< 	// half and half? or complete in both?
< 	
< 	// transfer complete, check if password matches
< 	check_password_scatter_gather(buffer1,buffer2);
< 	// in theory, transmitter is enabled and does not use dma
< 	// so it should work
< 	// check if write is ready?
< 	for (int i=0;i<4;i++){
< 		if (usart_is_tx_ready(BOARD_USART)){
< 			usart_write(BOARD_USART,buffer1[i]);
< 		}	
< 	}
< 	for (int i=0;i<4;i++){
< 		if (usart_is_tx_ready(BOARD_USART)){
< 			usart_write(BOARD_USART,buffer2[i]);
< 		}
< 	}
< 	
246,248d177
< 		// no error and dma transfer complete
< 		// in the default example, they reset the dma config 
< 		// and are ready to go again
264c193
< 		US_MR_PAR_ODD,
---
> 		US_MR_PAR_NO,
282a212,225
> /**
>  *  Configure UART for debug message output.
>  */
> static void configure_console(void)
> {
> 	const usart_serial_options_t uart_serial_options = {
> 		.baudrate = CONF_UART_BAUDRATE,
> 		.paritytype = CONF_UART_PARITY
> 	};
> 
> 	/* Configure console UART. */
> 	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
> 	stdio_serial_init(CONF_UART, &uart_serial_options);
> }
310a254,259
> 	/* Configure UART for debug message output. */
> 	configure_console();
> 
> 	/* Output example information. */
> 	puts(STRING_HEADER);
> 
312d260
< 	// seems to not require any dma config, so we can ignore this for now
320,322d267
< 
< 	// Hack: Force padding to not get optimized away
< 	__asm__ __volatile__("" :: "m" (pad));
