diff --git a/opt/sdk/nRF5_SDK_17.1.0_ddde560/examples/peripheral/uart/main.c b/opt/samples/uart_example/main.c
index 3339f64..f3bb368 100644
--- a/opt/sdk/nRF5_SDK_17.1.0_ddde560/examples/peripheral/uart/main.c
+++ b/opt/samples/uart_example/main.c
@@ -47,150 +47,91 @@
  *
  */
 
+#include "pw_check.h"
+#include "app_error.h"
+#include "app_uart.h"
+#include "bsp.h"
+#include "nrf.h"
+#include "nrf_delay.h"
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
-#include "app_uart.h"
-#include "app_error.h"
-#include "nrf_delay.h"
-#include "nrf.h"
-#include "bsp.h"
-#if defined (UART_PRESENT)
+#if defined(UART_PRESENT)
 #include "nrf_uart.h"
 #endif
-#if defined (UARTE_PRESENT)
+#if defined(UARTE_PRESENT)
 #include "nrf_uarte.h"
 #endif
 
+uint8_t dma_buf[8];
 
-//#define ENABLE_LOOPBACK_TEST  /**< if defined, then this example will be a loopback test, which means that TX should be connected to RX to get data loopback. */
-
-#define MAX_TEST_DATA_BYTES     (15U)                /**< max number of test bytes to be used for tx and rx. */
-#define UART_TX_BUF_SIZE 256                         /**< UART TX buffer size. */
-#define UART_RX_BUF_SIZE 256                         /**< UART RX buffer size. */
-
-void uart_error_handle(app_uart_evt_t * p_event)
-{
-    if (p_event->evt_type == APP_UART_COMMUNICATION_ERROR)
-    {
-        APP_ERROR_HANDLER(p_event->data.error_communication);
-    }
-    else if (p_event->evt_type == APP_UART_FIFO_ERROR)
-    {
-        APP_ERROR_HANDLER(p_event->data.error_code);
-    }
-}
-
-
-#ifdef ENABLE_LOOPBACK_TEST
-/* Use flow control in loopback test. */
-#define UART_HWFC APP_UART_FLOW_CONTROL_ENABLED
-
-/** @brief Function for setting the @ref ERROR_PIN high, and then enter an infinite loop.
- */
-static void show_error(void)
-{
 
-    bsp_board_leds_on();
-    while (true)
-    {
-        // Do nothing.
-    }
+void uart_error_handle(app_uart_evt_t *p_event) {
+  if (p_event->evt_type == APP_UART_COMMUNICATION_ERROR) {
+    APP_ERROR_HANDLER(p_event->data.error_communication);
+  } else if (p_event->evt_type == APP_UART_FIFO_ERROR) {
+    APP_ERROR_HANDLER(p_event->data.error_code);
+  }
 }
 
-
-/** @brief Function for testing UART loop back.
- *  @details Transmitts one character at a time to check if the data received from the loopback is same as the transmitted data.
- *  @note  @ref TX_PIN_NUMBER must be connected to @ref RX_PIN_NUMBER)
- */
-static void uart_loopback_test()
-{
-    uint8_t * tx_data = (uint8_t *)("\r\nLOOPBACK_TEST\r\n");
-    uint8_t   rx_data;
-
-    // Start sending one byte and see if you get the same
-    for (uint32_t i = 0; i < MAX_TEST_DATA_BYTES; i++)
-    {
-        uint32_t err_code;
-        while (app_uart_put(tx_data[i]) != NRF_SUCCESS);
-
-        nrf_delay_ms(10);
-        err_code = app_uart_get(&rx_data);
-
-        if ((rx_data != tx_data[i]) || (err_code != NRF_SUCCESS))
-        {
-            show_error();
-        }
-    }
-    return;
-}
-#else
 /* When UART is used for communication with the host do not use flow control.*/
 #define UART_HWFC APP_UART_FLOW_CONTROL_DISABLED
-#endif
-
 
 /**
  * @brief Function for main application entry.
  */
-int main(void)
-{
-    uint32_t err_code;
-
-    bsp_board_init(BSP_INIT_LEDS);
-
-    const app_uart_comm_params_t comm_params =
-      {
-          RX_PIN_NUMBER,
-          TX_PIN_NUMBER,
-          RTS_PIN_NUMBER,
-          CTS_PIN_NUMBER,
-          UART_HWFC,
-          false,
-#if defined (UART_PRESENT)
-          NRF_UART_BAUDRATE_115200
+int main(void) {
+  uint32_t err_code;
+
+  bsp_board_init(BSP_INIT_LEDS);
+
+  const app_uart_comm_params_t comm_params =
+  {
+    RX_PIN_NUMBER,
+    TX_PIN_NUMBER,
+    RTS_PIN_NUMBER,
+    CTS_PIN_NUMBER,
+    UART_HWFC,
+    false,
+#if defined(UART_PRESENT)
+    NRF_UART_BAUDRATE_9600
 #else
-          NRF_UARTE_BAUDRATE_115200
+    NRF_UARTE_BAUDRATE_9600
 #endif
-      };
-
-    APP_UART_FIFO_INIT(&comm_params,
-                         UART_RX_BUF_SIZE,
-                         UART_TX_BUF_SIZE,
-                         uart_error_handle,
-                         APP_IRQ_PRIORITY_LOWEST,
-                         err_code);
-
-    APP_ERROR_CHECK(err_code);
-
-#ifndef ENABLE_LOOPBACK_TEST
-    printf("\r\nUART example started.\r\n");
-
-    while (true)
-    {
-        uint8_t cr;
-        while (app_uart_get(&cr) != NRF_SUCCESS);
-        while (app_uart_put(cr) != NRF_SUCCESS);
-
-        if (cr == 'q' || cr == 'Q')
-        {
-            printf(" \r\nExit!\r\n");
-
-            while (true)
-            {
-                // Do nothing.
-            }
-        }
+  };
+
+  APP_UART_FIFO_INIT(&comm_params,
+      PASSWORD_CHECK_LEN,
+      PASSWORD_CHECK_LEN,
+      uart_error_handle,
+      APP_IRQ_PRIORITY_LOWEST,
+      err_code);
+
+  APP_ERROR_CHECK(err_code);
+
+  printf("\r\nUART example started.\r\n");
+
+  uint8_t index = 0;
+  while (true) {
+    uint8_t cr;
+    while (app_uart_get(&cr) != NRF_SUCCESS)
+      ;
+    while (app_uart_put(cr) != NRF_SUCCESS)
+      ;
+
+    dma_buf[index] = cr;
+    index += 1;
+    check_password(dma_buf);
+    if (index == 8) {
+      //if buf is full check password
+      for (int i = 0; i<8; i++)
+	  dma_buf[i] = 0;  
+      //start again
+      index = 0;
     }
-#else
 
-    // This part of the example is just for testing the loopback .
-    while (true)
-    {
-        uart_loopback_test();
-    }
-#endif
+  }
 }
 
-
 /** @} */
+
