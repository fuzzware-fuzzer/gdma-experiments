--- foo/uart.c	2024-12-03 13:41:15.355327136 +0100
+++ periph_uart_sg/uart.c	2024-12-03 13:09:38.129343893 +0100
@@ -32,6 +32,9 @@
 
 #include "chip.h"
 #include "board.h"
+#include "isup.h"
+#include "libss7.h"
+#include "mtp2.h"
 
 /*****************************************************************************
  * Private types/enumerations/variables
@@ -81,43 +84,25 @@
 #define _GPDMA_CONN_UART_Rx GPDMA_CONN_UART3_Rx
 #endif
 
-/* Transmit and receive ring buffers */
-STATIC RINGBUFF_T txring, rxring;
+#define DMA_SIZE 	128
 
-/* Ring buffer size */
-#define UART_RB_SIZE 256
+typedef struct {
+        uint32_t src;       /**< Source Address */
+        uint32_t dst;       /**< Destination address */
+        uint32_t lli;       /**< Next LLI address, otherwise set to '0' */
+        uint32_t ctrl;       /**< GPDMA Control of this LLI */
+} GPDMA_LLI_Type;
 
-/* Transmit and receive buffers */
-static uint8_t rxbuff[UART_RB_SIZE], txbuff[UART_RB_SIZE];
 
-static uint8_t uartABStart[] = "Starting UART Auto-Baud - Press 'A' or 'a'! \n\r";
-static uint8_t uartABComplete[] = "UART Auto-Baudrate synchronized! \n\r";
-
-/* Uart Polling variables and functions declaration */
-static uint8_t uartPolling_menu1[] = "Hello NXP Semiconductors \r\n";
-static uint8_t uartPolling_menu2[] = "UART polling mode demo \r\n";
-static uint8_t uartPolling_menu3[] = "\r\nUART demo terminated!";
-static uint8_t uartPolling_menu4[] = "\r\nPress number 1-3 to choose UART running mode:\r\n"
-									 "\t 1: Polling Mode \r\n"
-									 "\t 2: Interrupt Mode \r\n"
-									 "\t 3: DMA Mode \r\n";
-static uint8_t uartPolling_menu5[] = "\r\nPolling mode is running now! Please press \'c\' and choose another mode \r\n";
-
-/* Uart Interrupt variables and functions declaration */
-static uint8_t uart_interrupt_menu[] =
-	"UART Interrupt mode demo ! \r\nPress '1' to '4' to display 4 menus \r\nPress 'x'to exit UART interrupt mode \r\n";
-static uint8_t uart_interrupt_menu1[] = "UART interrupt menu 1 \r\n";
-static uint8_t uart_interrupt_menu2[] = "UART interrupt menu 2 \r\n";
-static uint8_t uart_interrupt_menu3[] = "UART interrupt menu 3 \r\n";
-static uint8_t uart_interrupt_menu4[] = "UART interrupt menu 4 \r\n";
-/* static uint8_t rxUartIntBuf[1]; */
+uint8_t DMADest_Buffer[DMA_SIZE+8];
+// 8 byte padding to have a separation between buffers
+uint8_t DMADest_Buffer_2[DMA_SIZE];
+/* Transmit and receive ring buffers */
+STATIC RINGBUFF_T txring, rxring;
 
-#define DMA_TIMEOUT 0xA000000
 
 /* DMA variables and functions declaration */
 static uint8_t dmaChannelNumTx, dmaChannelNumRx;
-static uint8_t uartDMA_menu[] = "Hello NXP Semiconductors (DMA mode)\r\n"
-								"UART DMA mode demo ! Please type 'hello NXP' to return\r\n";
 
 static volatile uint32_t channelTC;	/* Terminal Counter flag for Channel */
 static volatile uint32_t channelTCErr;
@@ -150,130 +135,63 @@
 	NVIC_DisableIRQ(DMA_IRQn);
 }
 
-/* DMA routine for example_uart */
+/* PATCHED DMA ROUTINE */
 static void App_DMA_Test(void)
 {
-	uint8_t receiveBuffer[16];
+	DMA_TransferDescriptor_t DMA_LLI_Struct[2], templli;
 
 	App_DMA_Init();
-	dmaChannelNumTx = Chip_GPDMA_GetFreeChannel(LPC_GPDMA, _GPDMA_CONN_UART_Tx);
-
-	isDMATx = ENABLE;
-	channelTC = channelTCErr = 0;
-	Chip_GPDMA_Transfer(LPC_GPDMA, dmaChannelNumTx,
-					  (uint32_t) &uartDMA_menu[0],
-					  _GPDMA_CONN_UART_Tx,
-					  GPDMA_TRANSFERTYPE_M2P_CONTROLLER_DMA,
-					  sizeof(uartDMA_menu));
-	while (!channelTC) {}
-
-	dmaChannelNumRx = Chip_GPDMA_GetFreeChannel(LPC_GPDMA, _GPDMA_CONN_UART_Rx);
-	isDMATx = DISABLE;
-	channelTC = channelTCErr = 0;
-	Chip_GPDMA_Transfer(LPC_GPDMA, dmaChannelNumRx,
-					  _GPDMA_CONN_UART_Rx,
-					  (uint32_t) &receiveBuffer[0],
-					  GPDMA_TRANSFERTYPE_P2M_CONTROLLER_DMA,
-					  10);
-	while (!channelTC) {}
-
-	isDMATx = ENABLE;
-	channelTC = channelTCErr = 0;
-	Chip_GPDMA_Transfer(LPC_GPDMA, dmaChannelNumTx,
-					  (uint32_t) &receiveBuffer[0],
-					  _GPDMA_CONN_UART_Tx,
-					  GPDMA_TRANSFERTYPE_M2P_CONTROLLER_DMA,
-					  10);
-	while (!channelTC) {}
-
-	App_DMA_DeInit();
-}
 
-/* Print Welcome Screen Menu subroutine by Interrupt mode */
-static void Print_Menu_Interrupt(LPC_USART_T *UARTx)
-{
-	uint32_t tmp;
-	uint8_t *pDat;
+	int res = -1;
 
-	tmp = sizeof(uart_interrupt_menu);
-	pDat = (uint8_t *) &uart_interrupt_menu[0];
-	Chip_UART_SendRB(UARTx, &txring, pDat, tmp);
-}
+	//prep descriptors
+	res = Chip_GPDMA_PrepareDescriptor(LPC_GPDMA, (uint32_t)&DMA_LLI_Struct[0], _GPDMA_CONN_UART_Rx, (uint32_t)DMADest_Buffer,
+	    							DMA_SIZE, GPDMA_TRANSFERTYPE_P2M_CONTROLLER_DMA, (uint32_t)&DMA_LLI_Struct[1]);
+
+	res = Chip_GPDMA_PrepareDescriptor(LPC_GPDMA, (uint32_t)&DMA_LLI_Struct[1], _GPDMA_CONN_UART_Rx, ((uint32_t)DMADest_Buffer_2),
+	    							DMA_SIZE, GPDMA_TRANSFERTYPE_P2M_CONTROLLER_DMA, 0);
+
+
+	// There seems to be an (ancient?) bug in the Scatter-gather API?
+	// https://community.nxp.com/t5/LPC-Microcontrollers/GPDMA-DAC-V2-12/m-p/583777
+	// We need to create an LLI with the peripheral value (in this case, src set
+	// to the lookup value, not the pointer)
+
+	// create a temporary LLI for the API call, this can be discarded after the call
+	templli.ctrl=DMA_LLI_Struct[0].ctrl;
+	templli.lli=(uint32_t)&DMA_LLI_Struct[1];
+	templli.src=LPC_GPDMA;
+	templli.dst=DMA_LLI_Struct[0].dst;
+
+    // init ss7 parser
+    struct ss7 *ss7;
+    ss7 = ss7_new(SS7_ANSI);
+    ss7_add_link(ss7, SS7_TRANSPORT_DAHDIDCHAN, 10, -1, 0);
+    ss7->debug = SS7_DEBUG_MTP2 | SS7_DEBUG_MTP3 | SS7_DEBUG_ISUP;
+    ss7->links[0]->state = MTP_INSERVICE;
+
+    for (int i = 0; i < 10; i++) {
+        // get a channel number and start the transfer
+        dmaChannelNumRx = 0;
+        isDMATx = DISABLE;
+        channelTC = channelTCErr = 0;
+        Chip_GPDMA_ChannelCmd(LPC_GPDMA, dmaChannelNumRx, DISABLE);
+        res = Chip_GPDMA_SGTransfer(LPC_GPDMA, dmaChannelNumRx, (uint32_t)&templli, GPDMA_TRANSFERTYPE_P2M_CONTROLLER_DMA);
+        if (res != 1){
+            return;
+        }
+        while (!channelTC) {
+                asm volatile("wfimark: .global wfimark":); // set marker for interrupt
+                __WFI();
+        }
 
-/* Initialize Interrupt for UART */
-static void App_Interrupt_Init(void)
-{
-	/* Enable UART Rx & line status interrupts */
-	/*
-	 * Do not enable transmit interrupt here, since it is handled by
-	 * UART_Send() function, just to reset Tx Interrupt state for the
-	 * first time
-	 */
-	Chip_UART_IntEnable(LPC_UART, (UART_IER_RBRINT | UART_IER_RLSINT));
-
-	/* Before using the ring buffers, initialize them using the ring
-	   buffer init function */
-	RingBuffer_Init(&rxring, rxbuff, 1, UART_RB_SIZE);
-	RingBuffer_Init(&txring, txbuff, 1, UART_RB_SIZE);
-
-	/* Enable Interrupt for UART channel */
-	/* Priority = 1 */
-	NVIC_SetPriority(UARTx_IRQn, 1);
-	/* Enable Interrupt for UART channel */
-	NVIC_EnableIRQ(UARTx_IRQn);
-}
+        mtp2_receive(ss7->links[0], DMADest_Buffer, DMA_SIZE);
+        mtp2_receive(ss7->links[0], DMADest_Buffer_2, DMA_SIZE);
 
-/* DeInitialize Interrupt for UART */
-static void App_Interrupt_DeInit(void)
-{
-	/* Disable UART Rx & line status interrupts */
-	Chip_UART_IntDisable(LPC_UART, (UART_IER_RBRINT | UART_IER_RLSINT));
+    }
 
-	/* Disable Interrupt for UART channel */
-	NVIC_DisableIRQ(UARTx_IRQn);
-}
-
-/* Interrupt routine for example_uart */
-static void App_Interrupt_Test(void)
-{
-	uint8_t isExit = 0, userInput;
-	int len;
-	App_Interrupt_Init();
-
-	/* Print out uart interrupt menu */
-	Print_Menu_Interrupt(LPC_UART);
-
-	while (!isExit) {
-		len = 0;
-		while (len == 0) {
-			len = Chip_UART_ReadRB(LPC_UART, &rxring, &userInput, 1);
-		}
-		if (userInput == '1') {
-			Chip_UART_SendRB(LPC_UART, &txring, (uint8_t *) &uart_interrupt_menu1[0], sizeof(uart_interrupt_menu1));
-		}
-		else if (userInput == '2') {
-			Chip_UART_SendRB(LPC_UART, &txring, (uint8_t *) &uart_interrupt_menu2[0], sizeof(uart_interrupt_menu2));
-		}
-		else if (userInput == '3') {
-			Chip_UART_SendRB(LPC_UART, &txring, (uint8_t *) &uart_interrupt_menu3[0], sizeof(uart_interrupt_menu3));
-		}
-		else if (userInput == '4') {
-			Chip_UART_SendRB(LPC_UART, &txring, (uint8_t *) &uart_interrupt_menu4[0], sizeof(uart_interrupt_menu4));
-		}
-		else if (( userInput == 'x') || ( userInput == 'X') ) {
-			isExit = 1;
-		}
-	}
-
-	App_Interrupt_DeInit();
-}
-
-/* Print Welcome menu by Polling mode */
-static void Print_Menu_Polling(void)
-{
-	Chip_UART_SendBlocking(LPC_UART, uartPolling_menu1, sizeof(uartPolling_menu1));
-	Chip_UART_SendBlocking(LPC_UART, uartPolling_menu2, sizeof(uartPolling_menu2));
-	Chip_UART_SendBlocking(LPC_UART, uartPolling_menu5, sizeof(uartPolling_menu5));
+    ss7_destroy(ss7);
+	App_DMA_DeInit();
 }
 
 /*****************************************************************************
@@ -316,103 +234,28 @@
  */
 int main(void)
 {
-	FlagStatus exitflag;
-	uint8_t buffer[10];
 	int ret = 0;
-	int len;
 
 	SystemCoreClockUpdate();
 	Board_Init();
 	Board_UART_Init(LPC_UART);
 
-#if !((defined(CHIP_LPC43XX) && defined(BOARD_KEIL_MCB_18574357) && UARTNum==3) || ((!(defined(CHIP_LPC43XX) && defined(BOARD_KEIL_MCB_18574357))) && UARTNum==0))
 	Chip_UART_Init(LPC_UART);
 	Chip_UART_SetBaud(LPC_UART, 115200);
 	Chip_UART_ConfigData(LPC_UART, UART_LCR_WLEN8 | UART_LCR_SBS_1BIT); /* Default 8-N-1 */
 
 	/* Enable UART Transmit */
 	Chip_UART_TXEnable(LPC_UART);
-#endif
 
 	/* Reset FIFOs, Enable FIFOs and DMA mode in UART */
 	Chip_UART_SetupFIFOS(LPC_UART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS |
 							UART_FCR_TX_RS | UART_FCR_DMAMODE_SEL | UART_FCR_TRG_LEV0));
 
-	/* Enable UART End of Auto baudrate & Auto baudrate timeout interrupts */
-	Chip_UART_IntEnable(LPC_UART, (UART_IER_ABEOINT | UART_IER_ABTOINT));
-
-	/* preemption = 1, sub-priority = 1 */
-	NVIC_SetPriority(UARTx_IRQn, 1);
-	/* Enable Interrupt for UART0 channel */
-	NVIC_EnableIRQ(UARTx_IRQn);
-
-	/* Send UART Autobaud completed message */
-	Chip_UART_SendBlocking(LPC_UART, uartABStart, sizeof(uartABStart));
-
-	/* ---------------------- Auto baud rate section ----------------------- */
-	/* Start auto baudrate mode */
-	Chip_UART_ABCmd(LPC_UART, UART_ACR_MODE0, true, ENABLE);
-
-	/* Loop until auto baudrate mode complete */
-	while (Chip_UART_GetABEOStatus(LPC_UART) == RESET) {}
-
-	/* Send UART Autobaud completed message */
-	Chip_UART_SendBlocking(LPC_UART, uartABComplete, sizeof(uartABComplete));
-
-    /* Disable UART Interrupt */
-    NVIC_DisableIRQ(UARTx_IRQn);
-
-	/* Print welcome screen */
-	Print_Menu_Polling();
-
-	exitflag = RESET;
-	/* Read some data from the buffer */
-	while (exitflag == RESET) {
-		len = 0;
-		while (len == 0) {
-			len = Chip_UART_Read(LPC_UART, buffer, 1);
-		}
-		if (buffer[0] == 27) {
-			/* ESC key, set exit flag */
-			Chip_UART_SendBlocking(LPC_UART, uartPolling_menu3, sizeof(uartPolling_menu3));
-			ret = -1;
-			exitflag = SET;
-		}
-		else if (buffer[0] == 'c') {
-			Chip_UART_SendBlocking(LPC_UART, uartPolling_menu4, sizeof(uartPolling_menu4));
-			len = 0;
-			while (len == 0) {
-				len = Chip_UART_Read(LPC_UART, buffer, sizeof(buffer));
-				if ((buffer[0] != '1') && (buffer[0] != '2') && (buffer[0] != '3')) {
-					len = 0;
-				}
-			}
-			switch (buffer[0]) {
-			case '1':		/* Polling Mode */
-				Chip_UART_SendBlocking(LPC_UART, uartPolling_menu5, sizeof(uartPolling_menu5));
-				break;
-
-			case '2':		/* Interrupt Mode */
-				ret = 2;
-				/* Exitflag = SET; */
-				App_Interrupt_Test();
-				Print_Menu_Polling();
-				break;
-
-			case '3':		/* DMA mode */
-				ret = 3;
-				App_DMA_Test();
-				Print_Menu_Polling();
-				break;
-			}
-		}
-	}
-
-	/* Wait for current transmission complete - THR must be empty */
-	while (Chip_UART_CheckBusy(LPC_UART) == SET) {}
+    App_DMA_Test();
 
 	/* DeInitialize UART0 peripheral */
 	Chip_UART_DeInit(LPC_UART);
 
+    asm volatile("exit_main: .global exit_main":); // set marker for end of execution
 	return ret;
 }
