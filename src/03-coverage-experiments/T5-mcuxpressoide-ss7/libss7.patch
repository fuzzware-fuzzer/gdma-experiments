diff --color -aur '--color=never' libss7-master/isup.c periph_uart_sg/isup.c
--- libss7-master/isup.c	2019-03-29 14:38:17.000000000 +0100
+++ periph_uart_sg/isup.c	2024-12-02 19:42:50.229618768 +0100
@@ -5247,7 +5247,7 @@
 
 		for (x = 0; x < ISUP_MAX_TIMERS; x++) {
 			if (c->timer[x] > -1) {
-				buf_used = ss7_snprintf(buf, buf_used, buf_size, "%s(%li) ", isup_timer2str(x),  ss7->ss7_sched[c->timer[x]].when.tv_sec - time(NULL));
+				//buf_used = ss7_snprintf(buf, buf_used, buf_size, "%s(%li) ", isup_timer2str(x),  ss7->ss7_sched[c->timer[x]].when.tv_sec - time(NULL));
 			}
 		}
 		cust_printf(fd, "%s\n", buf);
diff --color -aur '--color=never' libss7-master/mtp2.c periph_uart_sg/mtp2.c
--- libss7-master/mtp2.c	2019-03-29 14:38:17.000000000 +0100
+++ periph_uart_sg/mtp2.c	2024-12-02 20:26:14.539386359 +0100
@@ -33,7 +33,7 @@
 #include "mtp3.h"
 #include <stdio.h>
 #include <string.h>
-#include <unistd.h>
+//#include <unistd.h>
 #include <stdlib.h>
 #include <errno.h>
 #include "mtp2.h"
@@ -282,6 +282,7 @@
 	mtp2_setstate(link, MTP_IDLE);
 }
 
+#if FALSE
 int mtp2_transmit(struct mtp2 *link)
 {
 	int res = 0;
@@ -358,6 +359,7 @@
 
 	return res;
 }
+#endif
 
 int mtp2_msu(struct mtp2 *link, struct ss7_msg *m)
 {
diff --color -aur '--color=never' libss7-master/ss7.c periph_uart_sg/ss7.c
--- libss7-master/ss7.c	2019-03-29 14:38:17.000000000 +0100
+++ periph_uart_sg/ss7.c	2024-12-03 13:17:07.712821742 +0100
@@ -30,13 +30,13 @@
  */
 
 #include <stdlib.h>
-#include <unistd.h>
+//#include <unistd.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <string.h>
 #include <time.h>
-#include <sys/ioctl.h>
-#include <sys/poll.h>
+//#include <sys/ioctl.h>
+//#include <sys/poll.h>
 #include "libss7.h"
 #include "ss7_internal.h"
 #include "mtp2.h"
@@ -263,6 +263,7 @@
 	return ((i != -1) ? ss7->links[i] : NULL);
 }
 
+#if FALSE
 int ss7_pollflags(struct ss7 *ss7, int fd)
 {
 	int flags = POLLPRI | POLLIN;
@@ -282,6 +283,7 @@
 
 	return flags;
 }
+#endif
 
 int ss7_set_pc(struct ss7 *ss7, unsigned int pc)
 {
@@ -463,6 +465,7 @@
 	ss7->cause_location = 0x0f & location;
 }
 
+#if FALSE
 int ss7_write(struct ss7 *ss7, int fd)
 {
 	int res;
@@ -496,6 +499,7 @@
 
 	return res;
 }
+#endif
 
 static inline char * changeover2str(int state)
 {
@@ -651,8 +655,10 @@
 				if (link->mtp3_timer[x] > -1) {
 					strcpy(p, mtp3_timer2str(x));
 					p += strlen(p);
+#if FALSE
 					sprintf(p, "(%lis)%c", ss7->ss7_sched[ss7->links[i]->mtp3_timer[x]].when.tv_sec - time(NULL),
 						ss7->ss7_sched[ss7->links[i]->mtp3_timer[x]].callback ? ' ' : '!');
+#endif
 					p += strlen(p);
 				}
 			}
diff --color -aur '--color=never' libss7-master/ss7_internal.h periph_uart_sg/ss7_internal.h
--- libss7-master/ss7_internal.h	2019-03-29 14:38:17.000000000 +0100
+++ periph_uart_sg/ss7_internal.h	2024-12-02 20:18:10.027591330 +0100
@@ -32,7 +32,6 @@
 #ifndef _SS7_H
 #define _SS7_H
 
-#include <sys/time.h>
 #include <stdio.h>
 #include "libss7.h"
 /* #include "mtp2.h" */
@@ -85,7 +84,7 @@
 };
 
 struct ss7_sched {
-	struct timeval when;
+	//struct timeval when;
 	void (*callback)(void *data);
 	void *data;
 };
diff --color -aur '--color=never' libss7-master/ss7_sched.c periph_uart_sg/ss7_sched.c
--- libss7-master/ss7_sched.c	2019-03-29 14:38:17.000000000 +0100
+++ periph_uart_sg/ss7_sched.c	2024-12-02 20:21:27.908335319 +0100
@@ -38,6 +38,7 @@
 /* Scheduler routines */
 int ss7_schedule_event(struct ss7 *ss7, int ms, void (*function)(void *data), void *data)
 {
+#if FALSE
 	int x;
 	struct timeval tv;
 	for (x=1;x<MAX_SCHED;x++)
@@ -58,23 +59,28 @@
 	ss7->ss7_sched[x].callback = function;
 	ss7->ss7_sched[x].data = data;
 	return x;
+#endif
+    return 1;
 }
 
+#if FALSE
 struct timeval *ss7_schedule_next(struct ss7 *ss7)
 {
 	struct timeval *closest = NULL;
 	int x;
 	/* Check subchannels */
 	for (x=1;x<MAX_SCHED;x++) {
-		if (ss7->ss7_sched[x].callback && 
+		if (ss7->ss7_sched[x].callback &&
 			(!closest || (closest->tv_sec > ss7->ss7_sched[x].when.tv_sec) ||
-				((closest->tv_sec == ss7->ss7_sched[x].when.tv_sec) && 
+				((closest->tv_sec == ss7->ss7_sched[x].when.tv_sec) &&
 				 (closest->tv_usec > ss7->ss7_sched[x].when.tv_usec))))
 				 	closest = &ss7->ss7_sched[x].when;
 	}
 	return closest;
 }
+#endif
 
+#if FALSE
 static int __ss7_schedule_run(struct ss7 *ss7, struct timeval *tv)
 {
 	int x;
@@ -94,9 +100,11 @@
 	}
 	return 0;
 }
+#endif
 
 int ss7_schedule_run(struct ss7 *ss7)
 {
+#if FALSE
 	int res;
 
 	struct timeval tv;
@@ -105,11 +113,14 @@
 	res =  __ss7_schedule_run(ss7, &tv);
 
 	return res;
+#endif
+    return 0;
 }
 
 void ss7_schedule_del(struct ss7 *ss7, int *id)
 {
-	if ((*id >= MAX_SCHED)) 
+#if FALSE
+	if ((*id >= MAX_SCHED))
 		ss7_error(ss7, "Asked to delete sched id %d???\n", *id);
 
 	if (*id < 0) /* Item already deleted */
@@ -117,4 +128,5 @@
 
 	ss7->ss7_sched[*id].callback = NULL;
 	*id = -1; /* "Delete" the event */
+#endif
 }
