diff --git a/app/common/example/uartdrv_baremetal/uartdrv_app.c b/app/common/example/uartdrv_baremetal/uartdrv_app.c
index 7049d5b9f..2b3ecbf4f 100644
--- a/app/common/example/uartdrv_baremetal/uartdrv_app.c
+++ b/app/common/example/uartdrv_baremetal/uartdrv_app.c
@@ -18,33 +18,31 @@
 #define CURRENT_MODULE_NAME    "APP_COMMON_EXAMPLE_UARTDRV"
 
 #include <stdio.h>
+#include <stdint.h>
 #include <string.h>
 #include "uartdrv_app.h"
 #include "sl_uartdrv_instances.h"
 #include "sl_power_manager.h"
-
+#include "pw_check.h"
+#include "message.h"
+#include "parser.h"
+#include "serialiser.h"
+#include "errors.h"
 /*******************************************************************************
  *******************************   DEFINES   ***********************************
  ******************************************************************************/
-#define INPUT_BUFSIZE    80
-
-#define OUTPUT_BUFSIZE (INPUT_BUFSIZE + 40)
+#define INPUT_BUFSIZE    100
 
 /*******************************************************************************
  ***************************  LOCAL VARIABLES   ********************************
  ******************************************************************************/
+mqtt_parser_t parser;
+mqtt_serialiser_t serialiser;
+mqtt_message_t message;
 
 // Byte received
-uint8_t rx_byte;
-
-// Track number of bytes transmitted
-static uint8_t tx_counter = 0;
-
-// Input buffer
-static char buffer[INPUT_BUFSIZE];
+uint8_t dma_buf[INPUT_BUFSIZE] __attribute__((aligned(16))) = {0};
 
-// Output buffer
-char reply[OUTPUT_BUFSIZE];
 
 /*******************************************************************************
  *********************   LOCAL FUNCTION PROTOTYPES   ***************************
@@ -60,13 +58,6 @@ static void UART_tx_callback(UARTDRV_Handle_t handle,
                              uint8_t *data,
                              UARTDRV_Count_t transferCount)
 {
-  (void)handle;
-  (void)data;
-  (void)transferCount;
-
-  if (transferStatus == ECODE_EMDRV_UARTDRV_OK) {
-    tx_counter++;
-  }
 }
 
 // Callback triggered when UARTDRV has received data
@@ -75,41 +66,27 @@ static void UART_rx_callback(UARTDRV_Handle_t handle,
                              uint8_t *data,
                              UARTDRV_Count_t transferCount)
 {
-  (void)transferCount;
-  (void)handle;
-  static uint8_t index = 0;
-
+  ssize_t nread = 0; 
   if (transferStatus == ECODE_EMDRV_UARTDRV_OK) {
-    // If end of line is entered, echo input data
-    if (*data == '\r' || *data == '\n') {
-      buffer[index] = '\0';
-
-      //  Handling CR+LF (\r+\n) condition
-      if (index > 0) {
-        sprintf(reply, "\r\n\r\nYou wrote: %s \r\n\r\n> ", buffer);
-
-        // Echo the input string
-        UARTDRV_Transmit(sl_uartdrv_leuart_vcom_handle,
-                         (uint8_t *)reply, strlen(reply),
-                         UART_tx_callback);
+    uint8_t mqtt_buf[INPUT_BUFSIZE] = {0};
+    memcpy(mqtt_buf, dma_buf, INPUT_BUFSIZE);    
+    // mqtt parser interaction
+    int rc;
+    do {
+      // execute the parser with the dma buffer contents as its input
+      rc = mqtt_parser_execute(&parser, &message, mqtt_buf, INPUT_BUFSIZE, &nread);
+      if (rc == MQTT_PARSER_RC_WANT_MEMORY) {
+	// Increase memory if need be
+        mqtt_parser_buffer(&parser, malloc(parser.buffer_length), parser.buffer_length);  
       }
-      index = 0;
-    } else {
-      if (index < INPUT_BUFSIZE - 1) {
-        buffer[index] = *data;
-        index++;
-      }
-      // Echo the input character
-      UARTDRV_Transmit(sl_uartdrv_leuart_vcom_handle,
-                       data, 1,
-                       UART_tx_callback);
-    }
-  }
+    } while (rc == MQTT_PARSER_RC_CONTINUE || rc == MQTT_PARSER_RC_WANT_MEMORY);
 
-  /* Receive the next byte */
-  UARTDRV_Receive(sl_uartdrv_leuart_vcom_handle,
-                  &rx_byte, 1,
-                  UART_rx_callback);
+    // Serialize the parsed message
+    size_t packet_length = mqtt_serialiser_size(&serialiser, &message);
+    uint8_t* packet = malloc(packet_length);
+    mqtt_serialiser_write(&serialiser, &message, packet, packet_length);
+
+  }
 }
 
 /*******************************************************************************
@@ -135,19 +112,18 @@ sl_power_manager_on_isr_exit_t app_sleep_on_isr_exit(void)
  ******************************************************************************/
 void uartdrv_app_init(void)
 {
+	
+  // INIT MQTT
+  mqtt_parser_init(&parser);
+  mqtt_serialiser_init(&serialiser);
+  mqtt_message_init(&message);
+
   // Require at least EM2 from Power Manager
   sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM2);
 
-  /* Output on vcom leuart instance */
-  char *str1 = "\r\n\r\nUARTDRV LEUART example\r\n\r\n> ";
-
-  // Non-blocking transmit
-  UARTDRV_Transmit(sl_uartdrv_leuart_vcom_handle,
-                   (uint8_t *)str1, strlen(str1),
-                   UART_tx_callback);
   // Non-blocking receive
   UARTDRV_Receive(sl_uartdrv_leuart_vcom_handle,
-                  &rx_byte, 1,
+                  dma_buf, INPUT_BUFSIZE,
                   UART_rx_callback);
 }
 
